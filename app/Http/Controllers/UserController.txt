<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class UserController extends Controller
{
    /**
     * Display the settings page with user management
     *
     * @return \Illuminate\View\View
     */
    public function settings()
    {
        $users = User::all();
        return view('admin.settings', compact('users'));
    }

    /**
     * Store a newly created user
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function storeUser(Request $request)
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users'],
            'password' => ['required', 'confirmed', Password::defaults()],
            'user_type' => ['required', 'string', 'in:admin,faculty,student'],
            'is_active' => ['sometimes', 'boolean'],
        ]);

        User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'user_type' => $request->user_type,
            'is_active' => $request->has('is_active'),
        ]);

        return redirect()->route('admin.settings', ['#user-management'])
            ->with('success', 'User created successfully.');
    }

    /**
     * Get user data for editing
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Http\JsonResponse
     */
    public function getUser(User $user)
    {
        return response()->json([
            'id' => $user->id,
            'name' => $user->name,
            'email' => $user->email,
            'user_type' => $user->user_type,
            'is_active' => $user->is_active,
        ]);
    }

    /**
     * Update the specified user
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\User  $user
     * @return \Illuminate\Http\RedirectResponse
     */
    public function updateUser(Request $request, User $user)
    {
        $request->validate([
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users,email,' . $user->id],
            'password' => ['nullable', 'confirmed', Password::defaults()],
            'user_type' => ['required', 'string', 'in:admin,faculty,student'],
            'is_active' => ['sometimes', 'boolean'],
        ]);

        // Prevent deactivating or changing role of the last admin
        if ($user->isAdmin() && User::where('user_type', 'admin')->where('is_active', true)->count() <= 1) {
            if (!$request->has('is_active') || $request->user_type !== 'admin') {
                return redirect()->route('admin.settings', ['#user-management'])
                    ->with('error', 'Cannot modify the last active admin user.');
            }
        }

        $data = [
            'name' => $request->name,
            'email' => $request->email,
            'user_type' => $request->user_type,
            'is_active' => $request->has('is_active'),
        ];

        // Only update password if provided
        if ($request->filled('password')) {
            $data['password'] = Hash::make($request->password);
        }

        $user->update($data);

        return redirect()->route('admin.settings', ['#user-management'])
            ->with('success', 'User updated successfully.');
    }

    /**
     * Remove the specified user
     *
     * @param  \App\Models\User  $user
     * @return \Illuminate\Http\RedirectResponse
     */
    public function deleteUser(User $user)
    {
        // Prevent deleting your own account
        if (auth()->id() === $user->id) {
            return redirect()->route('admin.settings', ['#user-management'])
                ->with('error', 'You cannot delete your own account.');
        }

        // Prevent deleting the last admin
        if ($user->isAdmin() && User::where('user_type', 'admin')->where('is_active', true)->count() <= 1) {
            return redirect()->route('admin.settings', ['#user-management'])
                ->with('error', 'Cannot delete the last active admin user.');
        }

        $user->delete();

        return redirect()->route('admin.settings', ['#user-management'])
            ->with('success', 'User deleted successfully.');
    }
}